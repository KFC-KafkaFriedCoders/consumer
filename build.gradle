plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'application'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// 메인 클래스 설정
application {
	mainClass = 'org.example.consumer.ConsumerApplication'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'  // Spring Web MVC 의존성 추가
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springframework.boot:spring-boot-starter-actuator' // 서버 상태 모니터링
	implementation 'org.springframework.boot:spring-boot-starter-validation' // 유효성 검사
	implementation 'org.springframework.boot:spring-boot-configuration-processor' // 설정 처리
	implementation 'org.apache.kafka:kafka-clients:3.5.1'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.json:json:20240205'  // JSON 파싱을 위한 의존성
	implementation 'com.fasterxml.jackson.core:jackson-databind' // JSON 처리
	implementation 'org.projectlombok:lombok' // 기본 코드 자동 생성
	annotationProcessor 'org.projectlombok:lombok' // 롬볽 어노테이션 처리
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// 실행 가능한 JAR 파일 생성 설정
jar {
    manifest {
        attributes(
            'Main-Class': 'org.example.consumer.ConsumerApplication'
        )
    }
    
    // 의존성을 포함한 fat JAR 파일 생성
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
