name: Consumer EC2 배포

on:
  push:
    branches: main
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew

      - name: Gradle로 프로젝트 빌드
        run: ./gradlew clean bootJar

      - name: SSH 프라이빗 키 저장
        run: |
          echo "${{ secrets.EC2_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: EC2에서 기존 애플리케이션 정리
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
              # 기존 프로세스 종료
              pkill -f 'java -jar.*app.jar' || true
              sleep 5
              
              # 기존 파일들 삭제
              sudo rm -rf /home/${USER}/app.jar
              sudo rm -rf /home/${USER}/app.log
              echo "기존 파일들을 정리했습니다."
          EOF

      - name: 빌드된 JAR 파일을 EC2로 복사
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no \
            build/libs/consumer-*.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app.jar

      - name: EC2에서 새로운 애플리케이션 시작
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
              # 새로운 애플리케이션 시작
              nohup java -jar /home/${USER}/app.jar > app.log 2>&1 &
              
              # 시작 확인
              sleep 10
              if pgrep -f 'java -jar.*app.jar' > /dev/null; then
                echo "애플리케이션이 성공적으로 시작되었습니다."
                echo "PID: $(pgrep -f 'java -jar.*app.jar')"
              else
                echo "애플리케이션 시작 실패. 로그를 확인하세요."
                tail -20 app.log || echo "로그 파일이 없습니다."
                exit 1
              fi
          EOF
